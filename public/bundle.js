var app=angular.module("Listor",["ui.router","satellizer","dndLists"]);app.config(["$stateProvider","$urlRouterProvider","$authProvider",function(e,t,n){function r(e,t){var n=e.defer();return t.isAuthenticated()?n.reject():n.resolve(),n.promise}function o(e,t,n){var r=e.defer();return n.isAuthenticated()?r.resolve():t.path("/login"),r.promise}r.$inject=["$q","$auth"],o.$inject=["$q","$location","$auth"],n.google({clientId:"925082493768-e6ftet5isbrrhtg2tra4v7lhr23v6619.apps.googleusercontent.com"}),e.state("home",{url:"/",templateUrl:"templates/main.html",controller:"MainCtrl"}).state("register",{url:"/register",templateUrl:"templates/register.html",controller:"AuthCtrl",resolve:{skipIfLoggedIn:r}}).state("login",{url:"/login",templateUrl:"templates/login.html",controller:"AuthCtrl"}).state("logout",{url:"/logout",template:null,controller:"LogoutCtrl"}).state("profile",{url:"/profile",templateUrl:"templates/profile.html",controller:"ProfileCtrl",resolve:{loginRequired:o}}),t.otherwise("/")}]),app.controller("AuthCtrl",["$scope","$auth","$location","Account",function(e,t,n,r){e.authenticate=function(e){t.authenticate(e).then(function(e){console.log(e.data.token),t.setToken(e)}),n.path("/")},e.newUser={},e.errorMessage=!1,e.register=function(){t.signup(e.newUser).then(function(e){t.setToken(e),r.setUser().then(function(e){n.path("/")})})["catch"](function(t){console.log(t),e.errorMessage=t.data.message})},e.loginUser={},e.login=function(){t.login(e.loginUser).then(function(){r.setUser().then(function(e){n.path("/")})})["catch"](function(t){console.log(t),e.errorMessage=t.data.message})}}]),app.controller("LogoutCtrl",["$location","$auth",function(e,t){t.isAuthenticated()&&t.logout().then(function(){e.path("/")})}]),app.controller("MainCtrl",["$rootScope","$scope","$q","Candidate",function(e,t,n,r){t.master={},t.c={},t.addCandidate=function(n){return n.owner=e.user._id,r.add(n).then(function(e){t.reset()})},t.reset=function(){t.c=angular.copy(t.master)},t.refreshCandidates=function(){n.all([r.needsApproval(),r.needsFeedback(),r.needsInterview(),r.finalStages()]).then(function(e){t.needsApproval=e[0].data,t.needsFeedback=e[1].data,t.needsInterview=e[2].data,t.finalStages=e[3].data})["catch"](function(e){console.error(e)})}}]),app.controller("NavCtrl",["$rootScope","$auth","Account",function(e,t,n){n.setUser(),e.isAuthenticated=function(){return t.isAuthenticated()}}]),app.controller("ProfileCtrl",["$scope","$auth","Account",function(e,t,n){e.updateProfile=function(){n.updateProfile(e.user).then(function(){console.log("Profile has been updated")})["catch"](function(e){console.error(e.data.message,e.status)})}}]),app.factory("Account",["$http","$rootScope",function(e,t){return{setUser:function(){return e.get("/api/me").then(function(e){t.user=e.data})},getProfile:function(){return e.get("/api/me")},updateProfile:function(t){return e.put("/api/me",t)}}}]),app.factory("Candidate",["$http","$rootScope",function(e,t){var n=function(n){var r=t.user;return e({method:"GET",url:n,params:{owner:r._id}})};return{add:function(t){return e.post("/api/candidates/add",t)},all:function(){return n("/api/candidates")},needsApproval:function(){return n("/api/candidates/needsApproval")},needsFeedback:function(){return n("/api/candidates/needsFeedback")},needsInterview:function(){return n("/api/candidates/needsInterview")},finalStages:function(){return n("/api/candidates/finalStages")}}}]);
//# sourceMappingURL=data:application/json;base64,
