var app=angular.module("Listor",["ui.router","satellizer"]);app.config(["$stateProvider","$urlRouterProvider","$authProvider",function(t,e,o){function n(t,e){var o=t.defer();return e.isAuthenticated()?o.reject():o.resolve(),o.promise}function r(t,e,o){var n=t.defer();return o.isAuthenticated()?n.resolve():e.path("/login"),n.promise}n.$inject=["$q","$auth"],r.$inject=["$q","$location","$auth"],o.google({clientId:"925082493768-e6ftet5isbrrhtg2tra4v7lhr23v6619.apps.googleusercontent.com"}),t.state("home",{url:"/",templateUrl:"templates/main.html",controller:"MainCtrl"}).state("register",{url:"/register",templateUrl:"templates/register.html",controller:"AuthCtrl",resolve:{skipIfLoggedIn:n}}).state("login",{url:"/login",templateUrl:"templates/login.html",controller:"AuthCtrl"}).state("logout",{url:"/logout",template:null,controller:"LogoutCtrl"}).state("profile",{url:"/profile",templateUrl:"templates/profile.html",controller:"ProfileCtrl",resolve:{loginRequired:r}}),e.otherwise("/")}]),app.controller("AuthCtrl",["$scope","$auth","$location","Account",function(t,e,o,n){t.authenticate=function(t){e.authenticate(t).then(function(t){console.log(t.data.token),e.setToken(t)}),o.path("/")},t.newUser={},t.errorMessage=!1,t.register=function(){e.signup(t.newUser).then(function(t){e.setToken(t),n.setUser().then(function(t){o.path("/")})})["catch"](function(e){console.log(e),t.errorMessage=e.data.message})},t.loginUser={},t.login=function(){e.login(t.loginUser).then(function(){n.setUser().then(function(t){o.path("/")})})["catch"](function(e){console.log(e),t.errorMessage=e.data.message})}}]),app.controller("LogoutCtrl",["$location","$auth",function(t,e){e.isAuthenticated()&&e.logout().then(function(){t.path("/")})}]),app.controller("MainCtrl",["$scope","Candidate",function(t,e){t.addCandidate=function(o){return console.log(o),e.add(o).then(function(e){console.log(e),t.reset()})},t.reset=function(){t.c=angular.copy(t.master)}}]),app.controller("NavCtrl",["$scope","$auth","Account",function(t,e,o){o.setUser(),t.isAuthenticated=function(){return e.isAuthenticated()}}]),app.controller("ProfileCtrl",["$scope","$auth","Account",function(t,e,o){t.updateProfile=function(){o.updateProfile(t.user).then(function(){console.log("Profile has been updated")})["catch"](function(t){console.error(t.data.message,t.status)})}}]),app.factory("Account",["$http","$rootScope",function(t,e){return{setUser:function(){return t.get("/api/me").then(function(t){e.user=t.data,console.log("data: ",t.data)})},getProfile:function(){return t.get("/api/me")},updateProfile:function(e){return t.put("/api/me",e)}}}]),app.factory("Candidate",["$http",function(t){return{add:function(e){return t.post("/api/candidates/add",e)},all:function(){return t.get("/api/candidates")}}}]);
//# sourceMappingURL=data:application/json;base64,
