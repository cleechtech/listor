var app=angular.module("Listor",["ui.router","satellizer"]);app.config(["$stateProvider","$urlRouterProvider","$authProvider",function(t,e,o){function n(t,e){var o=t.defer();return e.isAuthenticated()?o.reject():o.resolve(),o.promise}function r(t,e,o){var n=t.defer();return o.isAuthenticated()?n.resolve():e.path("/login"),n.promise}n.$inject=["$q","$auth"],r.$inject=["$q","$location","$auth"],o.google({clientId:"925082493768-e6ftet5isbrrhtg2tra4v7lhr23v6619.apps.googleusercontent.com"}),t.state("home",{url:"/",templateUrl:"templates/main.html",controller:"MainCtrl"}).state("register",{url:"/register",templateUrl:"templates/register.html",controller:"AuthCtrl",resolve:{skipIfLoggedIn:n}}).state("login",{url:"/login",templateUrl:"templates/login.html",controller:"AuthCtrl"}).state("logout",{url:"/logout",template:null,controller:"LogoutCtrl"}).state("profile",{url:"/profile",templateUrl:"templates/profile.html",controller:"ProfileCtrl",resolve:{loginRequired:r}}),e.otherwise("/")}]),app.controller("AuthCtrl",["$scope","$auth","$location","Account",function(t,e,o,n){t.authenticate=function(t){e.authenticate(t).then(function(t){console.log(t.data.token),e.setToken(t)}),o.path("/")},t.newUser={},t.errorMessage=!1,t.register=function(){e.signup(t.newUser).then(function(t){e.setToken(t),n.setUser().then(function(t){o.path("/")})})["catch"](function(e){console.log(e),t.errorMessage=e.data.message})},t.loginUser={},t.login=function(){e.login(t.loginUser).then(function(){n.setUser().then(function(t){o.path("/")})})["catch"](function(e){console.log(e),t.errorMessage=e.data.message})}}]),app.controller("LogoutCtrl",["$location","$auth",function(t,e){e.isAuthenticated()&&e.logout().then(function(){t.path("/")})}]),app.controller("MainCtrl",["$scope","$http",function(t,e){t.addCandidate=function(o){return console.log(o),e.post("/api/candidates/add",o).then(function(e){console.log(e),t.reset()})},t.reset=function(){console.log("something"),t.c=angular.copy(t.master)}}]),app.controller("NavCtrl",["$scope","$auth","Account",function(t,e,o){o.setUser(),t.isAuthenticated=function(){return e.isAuthenticated()}}]),app.controller("ProfileCtrl",["$scope","$auth","Account",function(t,e,o){t.updateProfile=function(){o.updateProfile(t.user).then(function(){console.log("Profile has been updated")})["catch"](function(t){console.error(t.data.message,t.status)})}}]),app.factory("Account",["$http","$rootScope",function(t,e){return{setUser:function(){return t.get("/api/me").then(function(t){e.user=t.data,console.log("data: ",t.data)})},getProfile:function(){return t.get("/api/me")},updateProfile:function(e){return t.put("/api/me",e)}}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsInB1YmxpYy9idW5kbGUuanMiLCJjb250cm9sbGVycy9hdXRoLmpzIiwiY29udHJvbGxlcnMvbG9nb3V0LmpzIiwiY29udHJvbGxlcnMvbWFpbi5qcyIsImNvbnRyb2xsZXJzL25hdi5qcyIsImNvbnRyb2xsZXJzL3Byb2ZpbGUuanMiLCJmYWN0b3JpZXMvQWNjb3VudC5qcyJdLCJuYW1lcyI6WyJhcHAiLCJhbmd1bGFyIiwibW9kdWxlIiwiY29uZmlnIiwiJHN0YXRlUHJvdmlkZXIiLCIkdXJsUm91dGVyUHJvdmlkZXIiLCIkYXV0aFByb3ZpZGVyIiwic2tpcElmTG9nZ2VkSW4iLCIkcSIsIiRhdXRoIiwiZGZkIiwiZGVmZXIiLCJpc0F1dGhlbnRpY2F0ZWQiLCJyZWplY3QiLCJyZXNvbHZlIiwicHJvbWlzZSIsImxvZ2luUmVxdWlyZWQiLCIkbG9jYXRpb24iLCJkZWZlcnJlZCIsInBhdGgiLCIkaW5qZWN0IiwiZ29vZ2xlIiwiY2xpZW50SWQiLCJzdGF0ZSIsInVybCIsInRlbXBsYXRlVXJsIiwiY29udHJvbGxlciIsInRlbXBsYXRlIiwib3RoZXJ3aXNlIiwiJHNjb3BlIiwiQWNjb3VudCIsImF1dGhlbnRpY2F0ZSIsInByb3ZpZGVyIiwidGhlbiIsInJlcyIsImNvbnNvbGUiLCJsb2ciLCJkYXRhIiwidG9rZW4iLCJzZXRUb2tlbiIsIm5ld1VzZXIiLCJlcnJvck1lc3NhZ2UiLCJyZWdpc3RlciIsInNpZ251cCIsInNldFVzZXIiLCJyZXNwb25zZSIsIm1lc3NhZ2UiLCJsb2dpblVzZXIiLCJsb2dpbiIsImxvZ291dCIsIiRodHRwIiwiYWRkQ2FuZGlkYXRlIiwiY2FuZGlkYXRlIiwicG9zdCIsInJlc2V0IiwiYyIsImNvcHkiLCJtYXN0ZXIiLCJ1cGRhdGVQcm9maWxlIiwidXNlciIsImVycm9yIiwic3RhdHVzIiwiZmFjdG9yeSIsIiRyb290U2NvcGUiLCJnZXQiLCJnZXRQcm9maWxlIiwicHJvZmlsZURhdGEiLCJwdXQiXSwibWFw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RCxFQUFBNkIsY0FBQSxXQUNBNUIsRUFBQTRCLGNBQUE3QixFQUFBOEIsTUFDQTFCLEtBQUEsV0FDQUUsUUFBQUMsSUFBQSw4QkFGQU4sU0FJQSxTQUFBZSxHQUNBVixRQUFBeUIsTUFBQWYsRUFBQVIsS0FBQVMsUUFBQUQsRUFBQWdCLGNDVEE3RCxJQUFBOEQsUUFBQSxXQUFBLFFBQUEsYUFBQSxTQUFBWixFQUFBYSxHQUNBLE9BQ0FuQixRQUFBLFdBQ0EsTUFBQU0sR0FBQWMsSUFBQSxXQUNBL0IsS0FBQSxTQUFBWSxHQUNBa0IsRUFBQUosS0FBQWQsRUFBQVIsS0FDQUYsUUFBQUMsSUFBQSxTQUFBUyxFQUFBUixTQUdBNEIsV0FBQSxXQUNBLE1BQUFmLEdBQUFjLElBQUEsWUFFQU4sY0FBQSxTQUFBUSxHQUNBLE1BQUFoQixHQUFBaUIsSUFBQSxVQUFBRCIsImZpbGUiOiJwdWJsaWMvYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG52YXIgYXBwID0gYW5ndWxhci5tb2R1bGUoJ0xpc3RvcicsIFtcblx0J3VpLnJvdXRlcicsXG5cdCdzYXRlbGxpemVyJ1xuXSk7XG5cbmFwcC5jb25maWcoZnVuY3Rpb24oJHN0YXRlUHJvdmlkZXIsICR1cmxSb3V0ZXJQcm92aWRlciwgJGF1dGhQcm92aWRlcil7XG5cdC8vIHNhdGVsbGl6ZXIgY29uZmlnXG5cdCRhdXRoUHJvdmlkZXIuZ29vZ2xlKHtcbiAgICAgIGNsaWVudElkOiAnOTI1MDgyNDkzNzY4LWU2ZnRldDVpc2Jycmh0ZzJ0cmE0djdsaHIyM3Y2NjE5LmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tJ1xuICAgIH0pO1xuXG4gICAgLy8gZGVmaW5lIHJvdXRlc1xuXHQkc3RhdGVQcm92aWRlclxuXHRcdC5zdGF0ZSgnaG9tZScsIHtcblx0XHRcdHVybDogXCIvXCIsXG5cdFx0XHR0ZW1wbGF0ZVVybDogXCJ0ZW1wbGF0ZXMvbWFpbi5odG1sXCIsXG5cdFx0XHRjb250cm9sbGVyOiAnTWFpbkN0cmwnXG5cdFx0fSlcblx0XHQuc3RhdGUoJ3JlZ2lzdGVyJywge1xuXHRcdFx0dXJsOiBcIi9yZWdpc3RlclwiLFxuXHRcdFx0dGVtcGxhdGVVcmw6IFwidGVtcGxhdGVzL3JlZ2lzdGVyLmh0bWxcIixcblx0XHRcdGNvbnRyb2xsZXI6ICdBdXRoQ3RybCcsXG5cdFx0XHRyZXNvbHZlOiB7XG5cdCAgICAgICAgICBza2lwSWZMb2dnZWRJbjogc2tpcElmTG9nZ2VkSW5cblx0ICAgICAgICB9XG5cdFx0fSlcblx0XHQuc3RhdGUoJ2xvZ2luJywge1xuXHRcdFx0dXJsOiBcIi9sb2dpblwiLFxuXHRcdFx0dGVtcGxhdGVVcmw6IFwidGVtcGxhdGVzL2xvZ2luLmh0bWxcIixcblx0XHRcdGNvbnRyb2xsZXI6ICdBdXRoQ3RybCdcblx0XHR9KVxuXHRcdC5zdGF0ZSgnbG9nb3V0Jywge1xuXHRcdFx0dXJsOiAnL2xvZ291dCcsXG5cdFx0XHR0ZW1wbGF0ZTogbnVsbCxcblx0XHRcdGNvbnRyb2xsZXI6ICdMb2dvdXRDdHJsJ1xuXHRcdH0pXG5cdFx0LnN0YXRlKCdwcm9maWxlJywge1xuXHRcdFx0dXJsOiAnL3Byb2ZpbGUnLFxuXHRcdFx0dGVtcGxhdGVVcmw6ICd0ZW1wbGF0ZXMvcHJvZmlsZS5odG1sJyxcblx0XHRcdGNvbnRyb2xsZXI6ICdQcm9maWxlQ3RybCcsXG5cdFx0XHRyZXNvbHZlOiB7XG5cdFx0XHRcdGxvZ2luUmVxdWlyZWQ6IGxvZ2luUmVxdWlyZWRcblx0XHRcdH1cblx0XHR9KTtcblxuXHQkdXJsUm91dGVyUHJvdmlkZXIub3RoZXJ3aXNlKFwiL1wiKTtcblxuXHQvLyBSZXNvbHZlIGZ1bmN0aW9uc1xuXHRmdW5jdGlvbiBza2lwSWZMb2dnZWRJbigkcSwgJGF1dGgpIHtcbiAgICAgIHZhciBkZmQgPSAkcS5kZWZlcigpO1xuICAgICAgaWYgKCRhdXRoLmlzQXV0aGVudGljYXRlZCgpKSB7XG4gICAgICAgIGRmZC5yZWplY3QoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRmZC5yZXNvbHZlKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGZkLnByb21pc2U7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGxvZ2luUmVxdWlyZWQoJHEsICRsb2NhdGlvbiwgJGF1dGgpIHtcbiAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG4gICAgICBpZiAoJGF1dGguaXNBdXRoZW50aWNhdGVkKCkpIHtcbiAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy9sb2dpbicpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgfVxufSk7IiwiXG52YXIgYXBwID0gYW5ndWxhci5tb2R1bGUoJ0xpc3RvcicsIFtcblx0J3VpLnJvdXRlcicsXG5cdCdzYXRlbGxpemVyJ1xuXSk7XG5cbmFwcC5jb25maWcoW1wiJHN0YXRlUHJvdmlkZXJcIiwgXCIkdXJsUm91dGVyUHJvdmlkZXJcIiwgXCIkYXV0aFByb3ZpZGVyXCIsIGZ1bmN0aW9uKCRzdGF0ZVByb3ZpZGVyLCAkdXJsUm91dGVyUHJvdmlkZXIsICRhdXRoUHJvdmlkZXIpe1xuXHQvLyBzYXRlbGxpemVyIGNvbmZpZ1xuICAgIHNraXBJZkxvZ2dlZEluLiRpbmplY3QgPSBbXCIkcVwiLCBcIiRhdXRoXCJdO1xuICAgIGxvZ2luUmVxdWlyZWQuJGluamVjdCA9IFtcIiRxXCIsIFwiJGxvY2F0aW9uXCIsIFwiJGF1dGhcIl07XG5cdCRhdXRoUHJvdmlkZXIuZ29vZ2xlKHtcbiAgICAgIGNsaWVudElkOiAnOTI1MDgyNDkzNzY4LWU2ZnRldDVpc2Jycmh0ZzJ0cmE0djdsaHIyM3Y2NjE5LmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tJ1xuICAgIH0pO1xuXG4gICAgLy8gZGVmaW5lIHJvdXRlc1xuXHQkc3RhdGVQcm92aWRlclxuXHRcdC5zdGF0ZSgnaG9tZScsIHtcblx0XHRcdHVybDogXCIvXCIsXG5cdFx0XHR0ZW1wbGF0ZVVybDogXCJ0ZW1wbGF0ZXMvbWFpbi5odG1sXCIsXG5cdFx0XHRjb250cm9sbGVyOiAnTWFpbkN0cmwnXG5cdFx0fSlcblx0XHQuc3RhdGUoJ3JlZ2lzdGVyJywge1xuXHRcdFx0dXJsOiBcIi9yZWdpc3RlclwiLFxuXHRcdFx0dGVtcGxhdGVVcmw6IFwidGVtcGxhdGVzL3JlZ2lzdGVyLmh0bWxcIixcblx0XHRcdGNvbnRyb2xsZXI6ICdBdXRoQ3RybCcsXG5cdFx0XHRyZXNvbHZlOiB7XG5cdCAgICAgICAgICBza2lwSWZMb2dnZWRJbjogc2tpcElmTG9nZ2VkSW5cblx0ICAgICAgICB9XG5cdFx0fSlcblx0XHQuc3RhdGUoJ2xvZ2luJywge1xuXHRcdFx0dXJsOiBcIi9sb2dpblwiLFxuXHRcdFx0dGVtcGxhdGVVcmw6IFwidGVtcGxhdGVzL2xvZ2luLmh0bWxcIixcblx0XHRcdGNvbnRyb2xsZXI6ICdBdXRoQ3RybCdcblx0XHR9KVxuXHRcdC5zdGF0ZSgnbG9nb3V0Jywge1xuXHRcdFx0dXJsOiAnL2xvZ291dCcsXG5cdFx0XHR0ZW1wbGF0ZTogbnVsbCxcblx0XHRcdGNvbnRyb2xsZXI6ICdMb2dvdXRDdHJsJ1xuXHRcdH0pXG5cdFx0LnN0YXRlKCdwcm9maWxlJywge1xuXHRcdFx0dXJsOiAnL3Byb2ZpbGUnLFxuXHRcdFx0dGVtcGxhdGVVcmw6ICd0ZW1wbGF0ZXMvcHJvZmlsZS5odG1sJyxcblx0XHRcdGNvbnRyb2xsZXI6ICdQcm9maWxlQ3RybCcsXG5cdFx0XHRyZXNvbHZlOiB7XG5cdFx0XHRcdGxvZ2luUmVxdWlyZWQ6IGxvZ2luUmVxdWlyZWRcblx0XHRcdH1cblx0XHR9KTtcblxuXHQkdXJsUm91dGVyUHJvdmlkZXIub3RoZXJ3aXNlKFwiL1wiKTtcblxuXHQvLyBSZXNvbHZlIGZ1bmN0aW9uc1xuXHRmdW5jdGlvbiBza2lwSWZMb2dnZWRJbigkcSwgJGF1dGgpIHtcbiAgICAgIHZhciBkZmQgPSAkcS5kZWZlcigpO1xuICAgICAgaWYgKCRhdXRoLmlzQXV0aGVudGljYXRlZCgpKSB7XG4gICAgICAgIGRmZC5yZWplY3QoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRmZC5yZXNvbHZlKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGZkLnByb21pc2U7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGxvZ2luUmVxdWlyZWQoJHEsICRsb2NhdGlvbiwgJGF1dGgpIHtcbiAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG4gICAgICBpZiAoJGF1dGguaXNBdXRoZW50aWNhdGVkKCkpIHtcbiAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy9sb2dpbicpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgfVxufV0pO1xuXG5hcHAuY29udHJvbGxlcignQXV0aEN0cmwnLCBbXCIkc2NvcGVcIiwgXCIkYXV0aFwiLCBcIiRsb2NhdGlvblwiLCBcIkFjY291bnRcIiwgZnVuY3Rpb24oJHNjb3BlLCAkYXV0aCwgJGxvY2F0aW9uLCBBY2NvdW50KXtcblxuXHQvLyBGb3IgR29vZ2xlIGxvZ2luXG5cdCRzY29wZS5hdXRoZW50aWNhdGUgPSBmdW5jdGlvbihwcm92aWRlcikge1xuICAgICAgJGF1dGguYXV0aGVudGljYXRlKHByb3ZpZGVyKS50aGVuKGZ1bmN0aW9uKHJlcyl7XG4gICAgICBcdGNvbnNvbGUubG9nKHJlcy5kYXRhLnRva2VuKTtcbiAgICAgIFx0JGF1dGguc2V0VG9rZW4ocmVzKTtcbiAgICAgIH0pO1xuICAgICAgJGxvY2F0aW9uLnBhdGgoJy8nKTtcbiAgICB9O1xuXG5cdC8vIHJlZ2lzdGVyIG5ldyB1c2VyXG5cdCRzY29wZS5uZXdVc2VyID0ge307XG5cdCRzY29wZS5lcnJvck1lc3NhZ2UgPSBmYWxzZTtcblx0JHNjb3BlLnJlZ2lzdGVyID0gZnVuY3Rpb24oKXtcblx0XHQvLyBzZW5kIHNpZ251cCBQT1NUIHJlcXVlc3QgdG8gL2F1dGgvc2lnbnVwXG5cdFx0JGF1dGguc2lnbnVwKCRzY29wZS5uZXdVc2VyKVxuXHRcdFx0LnRoZW4oZnVuY3Rpb24ocmVzKXtcblx0XHRcdFx0Ly8gc2V0IGxvY2Fsc3RvcmFnZSB0b2tlblxuXHRcdFx0XHQkYXV0aC5zZXRUb2tlbihyZXMpO1xuXHRcdFx0XHRBY2NvdW50LnNldFVzZXIoKVxuXHRcdFx0ICAgICAgICAudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuXHRcdFx0ICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvJyk7XG5cdFx0XHQgICAgICAgIH0pO1xuXHRcdFx0fSlcblx0XHRcdC5jYXRjaChmdW5jdGlvbihyZXMpe1xuXHRcdFx0XHRjb25zb2xlLmxvZyhyZXMpO1xuXHRcdFx0XHQkc2NvcGUuZXJyb3JNZXNzYWdlID0gcmVzLmRhdGEubWVzc2FnZTtcblx0XHRcdH0pO1xuXHR9O1xuXG5cdCRzY29wZS5sb2dpblVzZXIgPSB7fTtcblx0JHNjb3BlLmxvZ2luID0gZnVuY3Rpb24oKSB7XG4gICAgICAkYXV0aC5sb2dpbigkc2NvcGUubG9naW5Vc2VyKVxuICAgICAgICAudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgXHRBY2NvdW50LnNldFVzZXIoKVxuXHRcdCAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcblx0XHQgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy8nKTtcblx0XHQgICAgICAgIH0pO1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZnVuY3Rpb24ocmVzKSB7XG4gICAgICAgIFx0Y29uc29sZS5sb2cocmVzKTtcblx0XHRcdCRzY29wZS5lcnJvck1lc3NhZ2UgPSByZXMuZGF0YS5tZXNzYWdlO1xuICAgICAgICB9KTtcbiAgICB9O1xufV0pO1xuYXBwLmNvbnRyb2xsZXIoJ0xvZ291dEN0cmwnLCBbXCIkbG9jYXRpb25cIiwgXCIkYXV0aFwiLCBmdW5jdGlvbigkbG9jYXRpb24sICRhdXRoKSB7XG5cdGlmICghJGF1dGguaXNBdXRoZW50aWNhdGVkKCkpIHsgcmV0dXJuOyB9XG5cblx0JGF1dGgubG9nb3V0KClcblx0ICAudGhlbihmdW5jdGlvbigpIHtcblx0ICAgICRsb2NhdGlvbi5wYXRoKCcvJyk7XG5cdCAgfSk7XG59XSk7XG5cbmFwcC5jb250cm9sbGVyKCdNYWluQ3RybCcsIFtcIiRzY29wZVwiLCBcIiRodHRwXCIsIGZ1bmN0aW9uKCRzY29wZSwgJGh0dHApe1xuXHQkc2NvcGUuYWRkQ2FuZGlkYXRlID0gZnVuY3Rpb24oY2FuZGlkYXRlKXtcblx0XHRjb25zb2xlLmxvZyhjYW5kaWRhdGUpO1xuXHRcdHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL2NhbmRpZGF0ZXMvYWRkJywgY2FuZGlkYXRlKS50aGVuKGZ1bmN0aW9uKHJlcyl7XG5cdFx0XHRjb25zb2xlLmxvZyhyZXMpO1xuXHRcdFx0JHNjb3BlLnJlc2V0KCk7XG5cdFx0fSk7XG5cdH07XG5cblx0JHNjb3BlLnJlc2V0ID0gZnVuY3Rpb24oKSB7XG5cdFx0Y29uc29sZS5sb2coJ3NvbWV0aGluZycpO1xuXHRcdCRzY29wZS5jID0gYW5ndWxhci5jb3B5KCRzY29wZS5tYXN0ZXIpO1xuXHR9O1xufV0pO1xuXG5hcHAuY29udHJvbGxlcignTmF2Q3RybCcsIFtcIiRzY29wZVwiLCBcIiRhdXRoXCIsIFwiQWNjb3VudFwiLCBmdW5jdGlvbigkc2NvcGUsICRhdXRoLCBBY2NvdW50KXtcblx0QWNjb3VudC5zZXRVc2VyKCk7XG5cdFxuXHQkc2NvcGUuaXNBdXRoZW50aWNhdGVkID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gJGF1dGguaXNBdXRoZW50aWNhdGVkKCk7XG4gICAgfTtcbn1dKVxuXG5hcHAuY29udHJvbGxlcignUHJvZmlsZUN0cmwnLCBbXCIkc2NvcGVcIiwgXCIkYXV0aFwiLCBcIkFjY291bnRcIiwgZnVuY3Rpb24oJHNjb3BlLCAkYXV0aCwgQWNjb3VudCkge1xuXG4gICAgJHNjb3BlLnVwZGF0ZVByb2ZpbGUgPSBmdW5jdGlvbigpIHtcbiAgICAgIEFjY291bnQudXBkYXRlUHJvZmlsZSgkc2NvcGUudXNlcilcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ1Byb2ZpbGUgaGFzIGJlZW4gdXBkYXRlZCcpO1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKHJlc3BvbnNlLmRhdGEubWVzc2FnZSwgcmVzcG9uc2Uuc3RhdHVzKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbn1dKTtcbmFwcC5mYWN0b3J5KCdBY2NvdW50JywgW1wiJGh0dHBcIiwgXCIkcm9vdFNjb3BlXCIsIGZ1bmN0aW9uKCRodHRwLCAkcm9vdFNjb3BlKSB7XG5cdHJldHVybiB7XG5cdFx0c2V0VXNlcjogZnVuY3Rpb24oKXtcblx0XHRcdHJldHVybiAkaHR0cC5nZXQoJy9hcGkvbWUnKVxuXHRcdCAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcblx0XHQgICAgICAgIFx0JHJvb3RTY29wZS51c2VyID0gcmVzcG9uc2UuZGF0YTtcblx0XHQgICAgICAgIFx0Y29uc29sZS5sb2coJ2RhdGE6ICcsIHJlc3BvbnNlLmRhdGEpO1xuXHRcdCAgICAgICAgfSk7XG5cdFx0fSxcblx0XHRnZXRQcm9maWxlOiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiAkaHR0cC5nZXQoJy9hcGkvbWUnKTtcblx0XHR9LFxuXHRcdHVwZGF0ZVByb2ZpbGU6IGZ1bmN0aW9uKHByb2ZpbGVEYXRhKSB7XG5cdFx0XHRyZXR1cm4gJGh0dHAucHV0KCcvYXBpL21lJywgcHJvZmlsZURhdGEpO1xuXHRcdH1cblx0fTtcbn1dKTtcbicvYXBpL2NhbmRpZGF0ZXMvJyIsIlxuYXBwLmNvbnRyb2xsZXIoJ0F1dGhDdHJsJywgZnVuY3Rpb24oJHNjb3BlLCAkYXV0aCwgJGxvY2F0aW9uLCBBY2NvdW50KXtcblxuXHQvLyBGb3IgR29vZ2xlIGxvZ2luXG5cdCRzY29wZS5hdXRoZW50aWNhdGUgPSBmdW5jdGlvbihwcm92aWRlcikge1xuICAgICAgJGF1dGguYXV0aGVudGljYXRlKHByb3ZpZGVyKS50aGVuKGZ1bmN0aW9uKHJlcyl7XG4gICAgICBcdGNvbnNvbGUubG9nKHJlcy5kYXRhLnRva2VuKTtcbiAgICAgIFx0JGF1dGguc2V0VG9rZW4ocmVzKTtcbiAgICAgIH0pO1xuICAgICAgJGxvY2F0aW9uLnBhdGgoJy8nKTtcbiAgICB9O1xuXG5cdC8vIHJlZ2lzdGVyIG5ldyB1c2VyXG5cdCRzY29wZS5uZXdVc2VyID0ge307XG5cdCRzY29wZS5lcnJvck1lc3NhZ2UgPSBmYWxzZTtcblx0JHNjb3BlLnJlZ2lzdGVyID0gZnVuY3Rpb24oKXtcblx0XHQvLyBzZW5kIHNpZ251cCBQT1NUIHJlcXVlc3QgdG8gL2F1dGgvc2lnbnVwXG5cdFx0JGF1dGguc2lnbnVwKCRzY29wZS5uZXdVc2VyKVxuXHRcdFx0LnRoZW4oZnVuY3Rpb24ocmVzKXtcblx0XHRcdFx0Ly8gc2V0IGxvY2Fsc3RvcmFnZSB0b2tlblxuXHRcdFx0XHQkYXV0aC5zZXRUb2tlbihyZXMpO1xuXHRcdFx0XHRBY2NvdW50LnNldFVzZXIoKVxuXHRcdFx0ICAgICAgICAudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuXHRcdFx0ICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvJyk7XG5cdFx0XHQgICAgICAgIH0pO1xuXHRcdFx0fSlcblx0XHRcdC5jYXRjaChmdW5jdGlvbihyZXMpe1xuXHRcdFx0XHRjb25zb2xlLmxvZyhyZXMpO1xuXHRcdFx0XHQkc2NvcGUuZXJyb3JNZXNzYWdlID0gcmVzLmRhdGEubWVzc2FnZTtcblx0XHRcdH0pO1xuXHR9O1xuXG5cdCRzY29wZS5sb2dpblVzZXIgPSB7fTtcblx0JHNjb3BlLmxvZ2luID0gZnVuY3Rpb24oKSB7XG4gICAgICAkYXV0aC5sb2dpbigkc2NvcGUubG9naW5Vc2VyKVxuICAgICAgICAudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgXHRBY2NvdW50LnNldFVzZXIoKVxuXHRcdCAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcblx0XHQgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy8nKTtcblx0XHQgICAgICAgIH0pO1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZnVuY3Rpb24ocmVzKSB7XG4gICAgICAgIFx0Y29uc29sZS5sb2cocmVzKTtcblx0XHRcdCRzY29wZS5lcnJvck1lc3NhZ2UgPSByZXMuZGF0YS5tZXNzYWdlO1xuICAgICAgICB9KTtcbiAgICB9O1xufSk7IiwiYXBwLmNvbnRyb2xsZXIoJ0xvZ291dEN0cmwnLCBmdW5jdGlvbigkbG9jYXRpb24sICRhdXRoKSB7XG5cdGlmICghJGF1dGguaXNBdXRoZW50aWNhdGVkKCkpIHsgcmV0dXJuOyB9XG5cblx0JGF1dGgubG9nb3V0KClcblx0ICAudGhlbihmdW5jdGlvbigpIHtcblx0ICAgICRsb2NhdGlvbi5wYXRoKCcvJyk7XG5cdCAgfSk7XG59KTsiLCJcbmFwcC5jb250cm9sbGVyKCdNYWluQ3RybCcsIGZ1bmN0aW9uKCRzY29wZSwgJGh0dHApe1xuXHQkc2NvcGUuYWRkQ2FuZGlkYXRlID0gZnVuY3Rpb24oY2FuZGlkYXRlKXtcblx0XHRjb25zb2xlLmxvZyhjYW5kaWRhdGUpO1xuXHRcdHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL2NhbmRpZGF0ZXMvYWRkJywgY2FuZGlkYXRlKS50aGVuKGZ1bmN0aW9uKHJlcyl7XG5cdFx0XHRjb25zb2xlLmxvZyhyZXMpO1xuXHRcdFx0JHNjb3BlLnJlc2V0KCk7XG5cdFx0fSk7XG5cdH07XG5cblx0JHNjb3BlLnJlc2V0ID0gZnVuY3Rpb24oKSB7XG5cdFx0Y29uc29sZS5sb2coJ3NvbWV0aGluZycpO1xuXHRcdCRzY29wZS5jID0gYW5ndWxhci5jb3B5KCRzY29wZS5tYXN0ZXIpO1xuXHR9O1xufSk7IiwiXG5hcHAuY29udHJvbGxlcignTmF2Q3RybCcsIGZ1bmN0aW9uKCRzY29wZSwgJGF1dGgsIEFjY291bnQpe1xuXHRBY2NvdW50LnNldFVzZXIoKTtcblx0XG5cdCRzY29wZS5pc0F1dGhlbnRpY2F0ZWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAkYXV0aC5pc0F1dGhlbnRpY2F0ZWQoKTtcbiAgICB9O1xufSkiLCJcbmFwcC5jb250cm9sbGVyKCdQcm9maWxlQ3RybCcsIGZ1bmN0aW9uKCRzY29wZSwgJGF1dGgsIEFjY291bnQpIHtcblxuICAgICRzY29wZS51cGRhdGVQcm9maWxlID0gZnVuY3Rpb24oKSB7XG4gICAgICBBY2NvdW50LnVwZGF0ZVByb2ZpbGUoJHNjb3BlLnVzZXIpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdQcm9maWxlIGhhcyBiZWVuIHVwZGF0ZWQnKTtcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihyZXNwb25zZS5kYXRhLm1lc3NhZ2UsIHJlc3BvbnNlLnN0YXR1cyk7XG4gICAgICAgIH0pO1xuICAgIH07XG59KTsiLCJhcHAuZmFjdG9yeSgnQWNjb3VudCcsIGZ1bmN0aW9uKCRodHRwLCAkcm9vdFNjb3BlKSB7XG5cdHJldHVybiB7XG5cdFx0c2V0VXNlcjogZnVuY3Rpb24oKXtcblx0XHRcdHJldHVybiAkaHR0cC5nZXQoJy9hcGkvbWUnKVxuXHRcdCAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcblx0XHQgICAgICAgIFx0JHJvb3RTY29wZS51c2VyID0gcmVzcG9uc2UuZGF0YTtcblx0XHQgICAgICAgIFx0Y29uc29sZS5sb2coJ2RhdGE6ICcsIHJlc3BvbnNlLmRhdGEpO1xuXHRcdCAgICAgICAgfSk7XG5cdFx0fSxcblx0XHRnZXRQcm9maWxlOiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiAkaHR0cC5nZXQoJy9hcGkvbWUnKTtcblx0XHR9LFxuXHRcdHVwZGF0ZVByb2ZpbGU6IGZ1bmN0aW9uKHByb2ZpbGVEYXRhKSB7XG5cdFx0XHRyZXR1cm4gJGh0dHAucHV0KCcvYXBpL21lJywgcHJvZmlsZURhdGEpO1xuXHRcdH1cblx0fTtcbn0pOyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
